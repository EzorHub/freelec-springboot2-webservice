package com.zozo.book.springboot;

import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
//테스트 진행시 Junit에 내장된 실행자외 다른 실행자 실행 - 여기서는 springRunner, 즉 스프링 실행자 사용
// 스프링부트 테스트와 JUnit사이 연결자 역할
@WebMvcTest
//수많은 스프링 테스트 어노테이션중 web(springMVC)에 집중하는 어노테이션
//선언할 경우, Controller, ControllerAdvice 사용할 수 있음
//단, service ,component, repository는 사용 ㄴㄴ
//컨트롤러만 여기서 사용할거니께 상관무
public class HelloControllerTest {
    @Autowired
    //스프링이 관리하는 빈 주입받음
    private MockMvc mvc;
    //웹 api테스트시 사용
    //스프링mvc테스트 시작점
    //이 클래스를 통해 httpGET/POST 등에 대한 api테스트 할 수 있음
    public void hello가_리턴된다() throws Exception{
        String hello = "hello";

        //mockMVC를 통해 /hello주소로 HTTPGET요청
        //체이닝이 지원되어 아래(.and~~ )와 같이 여러검증기능 이어서 선언하기 가능

        mvc.perform(get("/hello"))
                .andExpect(status().isOk()) // mvc.perform 결과 검증, status검증, 200,404,500 상태검증,ok==200인지아닌지검증
                .andExpect(content().string(hello)); //mvc.perform 결과 검증, 응답본문 내용검증, 컨트롤러에서 hello리턴값 맞는지검증

    }
}
